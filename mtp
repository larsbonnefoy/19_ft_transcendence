	@UseGuards(AuthGuard)
    @Post('message')
    async postMessage(@Request() req: any, @Body() messageInfos: messageDto, @Res() res: any)//TODO CHECK IF IS CHATTER NOT BAN NOR MUTED
    {
        console.log("POSTMESSAGE");
		const roomId: number = messageInfos.roomId
		const user : User = await this.userService.findOne(req.user);

        const message : ChatMessage = new ChatMessage;
        message.message = messageInfos.message;
		message.user = user;
		
		if (!user)
		{
            res.status(409).json({"error": "unknown user"}).send();
		}
        else if (await this.chatService.isBan(roomId, user) )
        {
            res.status(403).json({"error":"Forbidden"}).send();
        }
        else if (await this.chatService.isMute(roomId, user))
        {
            const mute: timeOut | undefined = muteArray.find((it) => {
                return it.chatId === roomId && it.userId === req.user
            })
            if (mute)
            {
                if (new Date().getTime() - mute.startTime > 10000)
                {
                    const index: number = muteArray.findIndex((it) =>{
                        return it.chatId === roomId && it.userId === req.user
                    })
                    let newMuteArray: Array<timeOut> = new Array(0);
                    let i: number = 0;
                    for (let mute of muteArray)
                    {
                        if (i !== index)
                            newMuteArray.push(mute);
                        i++;
                    }
                    muteArray = newMuteArray;
		            await this.chatService.removeMute(roomId, mute.userId);
                }
            }
            
            res.status(403).json({"error":"Forbidden"}).send();
        }
        else if (await this.chatService.isAdmin(roomId, user) 
            || await this.chatService.isOwner(roomId, user) 
            || await this.chatService.isChatter(roomId, user))
        {
        	if (await this.chatService.addMessage(messageInfos.roomId, message))
  		    	await res.status(200).json(message).send();
			else
            	res.status(409).json({"error":"no chat with that id"}).send();
        }
        else
            res.status(403).json({"error":"Forbidden"}).send();
		return ;
    }

	@UseGuards(AuthGuard)
	@Post('addMute')
	async addMute(@Res() res: any, @Body() body: string, @Request() req: any)
	{
        //get room id
        const start: number = new Date().getTime();
        const roomId: number = body['id'];
        if (!(await this.chatService.findOne(roomId)))
        {
            res.status(409).json({"error":"no chat room with that id"}).send();
            return;
        }
        if (!body['newMute'])
        {
            res.status(400).json({"error":"Bad Request"}).send();
            return;
        }
        //create the user object to add
		console.log("addMute");
		const newMute: User = await this.userService.findOne(body['newMute']);
		// console.log(newMute)
        //check is the User exist
        if (!newMute)
        {
            res.status(409).json({"error":"no user with that id"}).send();
            return;
        }
        //check if user is owner or mute
        const agent: User | null = (await this.userService.findOne(req.user));
        if (!(await this.chatService.isOwner(roomId, agent)) && !(await this.chatService.isAdmin(roomId, agent)) || (await this.chatService.isOwner(roomId, newMute)))
        {
            await res.status(403).json({"error":"Forbidden"}).send();
            return;
        }

		await this.chatService.addMute(roomId, newMute);
        const mute : timeOut = new timeOut;
        mute.chatId = roomId;
        mute.userId = newMute.login42;
        muteArray.push(mute);
        // await res.status(200).json({"status":"good"}).send();
        await res.status(200).json(await this.chatService.getMutes(body['id'])).send();
        return;
	}

    @UseGuards(AuthGuard)
	@Post('delMute') 
    async delMute(@Res() res: any, @Body() body: string, @Request() req: any)
	{
        //get room id
        const roomId: number = body['id'];
        const index: number = muteArray.findIndex((it) =>{
            return it.chatId === roomId && it.userId === req.user
        })
        let newMuteArray: Array<timeOut> = new Array(0);
        let i: number = 0;
        for (let mute of muteArray)
        {
            if (i !== index)
                newMuteArray.push(mute);
            i++;
        }
        muteArray = newMuteArray;

        if (!(await this.chatService.findOne(roomId)))
        {
            res.status(409).json({"error":"no chat room with that id"}).send();
            return;
        }

        //check if user is owner or mute
        const agent: User | null = (await this.userService.findOne(req.user));
        // if (!(await this.chatService.isOwner(roomId, agent)) && !(await this.chatService.isMute(roomId, agent)))
        if (!(await this.chatService.isOwner(roomId, agent)) && !(await this.chatService.isAdmin(roomId, agent)))
        {
            await res.status(403).json({"error":"Forbidden"}).send();
            return;
        }
		console.log("delMute");
        console.log(body['mute'])

		await this.chatService.removeMute(roomId, body['mute']);
        // await res.status(200).json({"status":"good"}).send();
        await res.status(200).json(await this.chatService.getMutes(body['id'])).send();
        return;
	}